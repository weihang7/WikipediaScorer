AlphabetCount:
  R [X] int get(string token)
  R [X] void add(string token, int num)

DataSet:
  F [ ] new DataSet(String baseFileName)
  
  (alphabet)
  F [ ] void addAlphabetCount(AlphabetCount new)
  F [ ] AlphabetCount getAlphabetCount()

  (tokens)
  F [ ] void add(boolean which, double[][] new)
  F [ ] double lookup(boolean which, int token_a, int token_b)
  F [ ] Enumeration<double[]> enumerate()
  F [ ] double[][] loadAll(boolean which)

  (files)
  F [X] void append(String file, String value)
  F [X] BufferedStringStream loadStringStream(String file)

Fetcher:
  A [X] new Fetcher()
  A [X] String[] getRandom(int num)
  A [X] String[] getGood(int num)

Tokenizer:
  A [X] String[] tokenize(String document)
  F [ ] AlphabetCount countForAlphabet(String[] document)
  A [X] int[] stripAlphabet(String[] document)

Counter:
  A [X] new Counter(int alphabetSize)
  A [X] void add(int[] document)
  A [X] double[][] finalize()

Smoother:
  A [X] Count smooth(Count a, Count b)

Scorer:
  A [ ] new Scorer(DataSet data)
  A [ ] double score(int[] input)

