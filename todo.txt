AlphabetCount:
  R [X] int get(string token)
  R [X] void add(string token, int num)

BufferedDatabaseWriter:
  F [ ] void add(String key, double value)
  F [ ] void flush()

DataSet:
  F [ ] new DataSet(String baseFileName)
  
  (alphabet)
  F [ ] BufferedDatabaseWriter writeAlphabetCounts()
  F [ ] String[] getBestAlphabet(int n)

  (counts)
  F [ ] void add(boolean which, double[][] new)
# F [ ] double lookup(boolean which, int token_a, int token_b)
  F [ ] Enumeration<double[]> enumerate()
  F [ ] double[][] loadAll(boolean which)

  (local wiki)
  F [ ] Enumeration<String> readWiki(boolean which)
  F [ ] StringWriter writeWiki(boolean which)

  (token strings)
  F [ ] Enumeration<Integer> readTokens(boolean which)
  F [ ] StringWriter writeTokens(boolean which)

Fetcher:
  A [X] new Fetcher()
  A [X] String[] getRandom(int num)
  A [X] String[] getGood(int num)

Tokenizer:
  A [X] String[] tokenize(String document)
  F [ ] AlphabetCount countForAlphabet(String[] document)
  A [X] int[] stripAlphabet(String[] document)

Counter:
  A [X] double[][] count(Enumeration<Integer> document, int alphabetSize)

Smoother:
  A [X] Count smooth(double[][] a, double[][] b)

Scorer:
  A [X] new Scorer(DataSet data)
  A [X] double score(int[] input)

